{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","captureImage","e","imageFile","target","files","console","log","setState","image","URL","createObjectURL","state","react_default","a","createElement","className","View","style","alignItems","marginTop","for","justifyContent","borderWidth","height","width","padding","Text","fontSize","fontWeight","visibility","id","type","accept","capture","onChange","src","objectFit","Button","title","onPress","alert","ReactPlayer_default","url","playing","controls","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0666e13d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {View,Text,Button} from 'react-native';\nimport ReactPlayer from 'react-player'\nimport {Image} from 'react-bootstrap';\n \nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      image:null\n    }\n  }\n  captureImage = (e)=>{\n    var imageFile = e.target.files[0]\n    console.log(\"Image\",imageFile);\n    \n    this.setState({image:URL.createObjectURL(imageFile)})\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n          <View style = {{alignItems:'center',marginTop:10}}>\n            <label for = \"getFile\">\n              <View style = {{justifyContent:'center',alignItems:'center',borderWidth:1,height:100,width:100,padding:10}}>\n                <Text style = {{fontSize:30,fontWeight:'bold'}}>Scan</Text>\n              </View>\n            </label>\n          </View>\n            <input style={{visibility:'hidden'}} id=\"getFile\" type=\"file\" accept=\"image/*\" capture=\"environment\" onChange = {this.captureImage}/>\n            \n            <View style = {{height:300,width:'100%',justifyContent:'center',alignItems:'center'}}>\n              <img src={this.state.image}  style={{width: \"100%\", height: \"100%\",objectFit:'contain'}}/>\n            </View>\n\n            <View style = {{height:200,justifyContent:'center',alignItems:'center',marginTop:10}}>\n              <Button title = \"submit\" onPress = {()=>alert(\"Submit\")}/>\n            </View>\n\n            <ReactPlayer \n                url='https://media.w3.org/2010/05/sintel/trailer_hd.mp4' \n                playing controls\n                height = {200}\n                width = {400}\n                />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-html5-camera-photo/build/css/index.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}